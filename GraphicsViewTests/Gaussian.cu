"void "
"kernel Gaussian( global const unsigned char* image, int width, int height, int bytesPerLine, global const float* gaussKernel, int kernelDim, global unsigned char* output )"
"{"
"   int pixelIndex = get_global_id(0) * 4;"
"   int x = pixelIndex % bytesPerLine / 4;"
"   int y = pixelIndex / bytesPerLine;"
"   int kernelCenter = kernelDim / 2;"
"   float rSum = 0;"
"   float gSum = 0;"
"   float bSum = 0;"
"   float aSum = 0;"
"   float kernelApplyed = 0;"
"   for( int kernX = 0; kernX < kernelDim; ++kernX )"
"   {"
"       for( int kernY = 0; kernY < kernelDim; ++kernY )"
"       {"
"           int offX = kernX - kernelCenter;"
"           int offY = kernY - kernelCenter;"
"           int lookupX = x + offX;"
"           int lookupY = y + offY;"
"           if( lookupX < 0 || lookupX >= width )"
"               continue;"
"           if( lookupY < 0 || lookupY >= height )"
"               continue;"
"           int kernelIndex = kernY * kernelDim + kernX;"
"           int pixelIndex2 = lookupY * bytesPerLine + lookupX * 4;"
"           float kernelValue = gaussKernel[ kernelIndex ];"

"           bSum += image[ pixelIndex2 + 0 ] * kernelValue;"
"           gSum += image[ pixelIndex2 + 1 ] * kernelValue;"
"           rSum += image[ pixelIndex2 + 2 ] * kernelValue;"
"           aSum += image[ pixelIndex2 + 3 ] * kernelValue;"
"           kernelApplyed += kernelValue;"
"       }"
"   }"
"   output[pixelIndex]      = bSum/kernelApplyed;"
"   output[pixelIndex+1]    = gSum/kernelApplyed;"
"   output[pixelIndex+2]    = rSum/kernelApplyed;"
"   output[pixelIndex+3]    = aSum/kernelApplyed;"
"}"